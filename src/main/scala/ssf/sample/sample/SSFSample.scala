// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ssf.sample

/** SSFSample is similar of a StatsD-style, point in time metric. It has a Metric
  * type, a name, a value and a timestamp. Additionally it can contain a message,
  * a status, a sample rate, a map of tags as string keys and values and a unit
  * type. Note that SSF doesn't understand units, they are just strings!
  *
  * @param metric
  *   The underlying type of the metric
  * @param name
  *   no spaces, but . is allowed
  *   e.g.: veneur.bar.baz
  */
@SerialVersionUID(0L)
final case class SSFSample(
    metric: ssf.sample.SSFSample.Metric = ssf.sample.SSFSample.Metric.COUNTER,
    name: _root_.scala.Predef.String = "",
    value: _root_.scala.Float = 0.0f,
    timestamp: _root_.scala.Long = 0L,
    message: _root_.scala.Predef.String = "",
    status: ssf.sample.SSFSample.Status = ssf.sample.SSFSample.Status.OK,
    sampleRate: _root_.scala.Float = 0.0f,
    tags: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = scala.collection.immutable.Map.empty,
    unit: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[SSFSample] with scalapb.lenses.Updatable[SSFSample] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (metric != ssf.sample.SSFSample.Metric.COUNTER) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, metric.value) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name) }
      if (value != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, value) }
      if (timestamp != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, timestamp) }
      if (message != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, message) }
      if (status != ssf.sample.SSFSample.Status.OK) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, status.value) }
      if (sampleRate != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(7, sampleRate) }
      tags.foreach(tags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ssf.sample.SSFSample._typemapper_tags.toBase(tags).serializedSize) + ssf.sample.SSFSample._typemapper_tags.toBase(tags).serializedSize)
      if (unit != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, unit) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = metric
        if (__v != ssf.sample.SSFSample.Metric.COUNTER) {
          _output__.writeEnum(1, __v.value)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = value
        if (__v != 0.0f) {
          _output__.writeFloat(3, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = message
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = status
        if (__v != ssf.sample.SSFSample.Status.OK) {
          _output__.writeEnum(6, __v.value)
        }
      };
      {
        val __v = sampleRate
        if (__v != 0.0f) {
          _output__.writeFloat(7, __v)
        }
      };
      tags.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(ssf.sample.SSFSample._typemapper_tags.toBase(__v).serializedSize)
        ssf.sample.SSFSample._typemapper_tags.toBase(__v).writeTo(_output__)
      };
      {
        val __v = unit
        if (__v != "") {
          _output__.writeString(9, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ssf.sample.SSFSample = {
      var __metric = this.metric
      var __name = this.name
      var __value = this.value
      var __timestamp = this.timestamp
      var __message = this.message
      var __status = this.status
      var __sampleRate = this.sampleRate
      val __tags = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String] ++= this.tags)
      var __unit = this.unit
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __metric = ssf.sample.SSFSample.Metric.fromValue(_input__.readEnum())
          case 18 =>
            __name = _input__.readString()
          case 29 =>
            __value = _input__.readFloat()
          case 32 =>
            __timestamp = _input__.readInt64()
          case 42 =>
            __message = _input__.readString()
          case 48 =>
            __status = ssf.sample.SSFSample.Status.fromValue(_input__.readEnum())
          case 61 =>
            __sampleRate = _input__.readFloat()
          case 66 =>
            __tags += ssf.sample.SSFSample._typemapper_tags.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, ssf.sample.SSFSample.TagsEntry.defaultInstance))
          case 74 =>
            __unit = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      ssf.sample.SSFSample(
          metric = __metric,
          name = __name,
          value = __value,
          timestamp = __timestamp,
          message = __message,
          status = __status,
          sampleRate = __sampleRate,
          tags = __tags.result(),
          unit = __unit
      )
    }
    def withMetric(__v: ssf.sample.SSFSample.Metric): SSFSample = copy(metric = __v)
    def withName(__v: _root_.scala.Predef.String): SSFSample = copy(name = __v)
    def withValue(__v: _root_.scala.Float): SSFSample = copy(value = __v)
    def withTimestamp(__v: _root_.scala.Long): SSFSample = copy(timestamp = __v)
    def withMessage(__v: _root_.scala.Predef.String): SSFSample = copy(message = __v)
    def withStatus(__v: ssf.sample.SSFSample.Status): SSFSample = copy(status = __v)
    def withSampleRate(__v: _root_.scala.Float): SSFSample = copy(sampleRate = __v)
    def clearTags = copy(tags = scala.collection.immutable.Map.empty)
    def addTags(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String)*): SSFSample = addAllTags(__vs)
    def addAllTags(__vs: TraversableOnce[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SSFSample = copy(tags = tags ++ __vs)
    def withTags(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SSFSample = copy(tags = __v)
    def withUnit(__v: _root_.scala.Predef.String): SSFSample = copy(unit = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = metric.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = value
          if (__t != 0.0f) __t else null
        }
        case 4 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = status.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 7 => {
          val __t = sampleRate
          if (__t != 0.0f) __t else null
        }
        case 8 => tags.map(ssf.sample.SSFSample._typemapper_tags.toBase)(_root_.scala.collection.breakOut)
        case 9 => {
          val __t = unit
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(metric.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PFloat(value)
        case 4 => _root_.scalapb.descriptors.PLong(timestamp)
        case 5 => _root_.scalapb.descriptors.PString(message)
        case 6 => _root_.scalapb.descriptors.PEnum(status.scalaValueDescriptor)
        case 7 => _root_.scalapb.descriptors.PFloat(sampleRate)
        case 8 => _root_.scalapb.descriptors.PRepeated(tags.map(ssf.sample.SSFSample._typemapper_tags.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 9 => _root_.scalapb.descriptors.PString(unit)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ssf.sample.SSFSample
}

object SSFSample extends scalapb.GeneratedMessageCompanion[ssf.sample.SSFSample] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ssf.sample.SSFSample] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ssf.sample.SSFSample = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    ssf.sample.SSFSample(
      ssf.sample.SSFSample.Metric.fromValue(__fieldsMap.getOrElse(__fields.get(0), ssf.sample.SSFSample.Metric.COUNTER.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), 0.0f).asInstanceOf[_root_.scala.Float],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      ssf.sample.SSFSample.Status.fromValue(__fieldsMap.getOrElse(__fields.get(5), ssf.sample.SSFSample.Status.OK.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(6), 0.0f).asInstanceOf[_root_.scala.Float],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[ssf.sample.SSFSample.TagsEntry]].map(ssf.sample.SSFSample._typemapper_tags.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(8), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ssf.sample.SSFSample] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      ssf.sample.SSFSample(
        ssf.sample.SSFSample.Metric.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ssf.sample.SSFSample.Metric.COUNTER.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        ssf.sample.SSFSample.Status.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(ssf.sample.SSFSample.Status.OK.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[ssf.sample.SSFSample.TagsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(ssf.sample.SSFSample._typemapper_tags.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SampleProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SampleProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 8 => __out = ssf.sample.SSFSample.TagsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.ssf.sample.SSFSample.TagsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => ssf.sample.SSFSample.Metric
      case 6 => ssf.sample.SSFSample.Status
    }
  }
  lazy val defaultInstance = ssf.sample.SSFSample(
  )
  sealed trait Metric extends _root_.scalapb.GeneratedEnum {
    type EnumType = Metric
    def isCounter: _root_.scala.Boolean = false
    def isGauge: _root_.scala.Boolean = false
    def isHistogram: _root_.scala.Boolean = false
    def isSet: _root_.scala.Boolean = false
    def isStatus: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Metric] = ssf.sample.SSFSample.Metric
  }
  
  object Metric extends _root_.scalapb.GeneratedEnumCompanion[Metric] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Metric] = this
    @SerialVersionUID(0L)
    case object COUNTER extends Metric {
      val value = 0
      val index = 0
      val name = "COUNTER"
      override def isCounter: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GAUGE extends Metric {
      val value = 1
      val index = 1
      val name = "GAUGE"
      override def isGauge: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HISTOGRAM extends Metric {
      val value = 2
      val index = 2
      val name = "HISTOGRAM"
      override def isHistogram: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SET extends Metric {
      val value = 3
      val index = 3
      val name = "SET"
      override def isSet: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STATUS extends Metric {
      val value = 4
      val index = 4
      val name = "STATUS"
      override def isStatus: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Metric with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(COUNTER, GAUGE, HISTOGRAM, SET, STATUS)
    def fromValue(value: _root_.scala.Int): Metric = value match {
      case 0 => COUNTER
      case 1 => GAUGE
      case 2 => HISTOGRAM
      case 3 => SET
      case 4 => STATUS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = ssf.sample.SSFSample.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = ssf.sample.SSFSample.scalaDescriptor.enums(0)
  }
  sealed trait Status extends _root_.scalapb.GeneratedEnum {
    type EnumType = Status
    def isOk: _root_.scala.Boolean = false
    def isWarning: _root_.scala.Boolean = false
    def isCritical: _root_.scala.Boolean = false
    def isUnknown: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Status] = ssf.sample.SSFSample.Status
  }
  
  object Status extends _root_.scalapb.GeneratedEnumCompanion[Status] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Status] = this
    @SerialVersionUID(0L)
    case object OK extends Status {
      val value = 0
      val index = 0
      val name = "OK"
      override def isOk: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WARNING extends Status {
      val value = 1
      val index = 1
      val name = "WARNING"
      override def isWarning: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CRITICAL extends Status {
      val value = 2
      val index = 2
      val name = "CRITICAL"
      override def isCritical: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNKNOWN extends Status {
      val value = 3
      val index = 3
      val name = "UNKNOWN"
      override def isUnknown: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Status with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(OK, WARNING, CRITICAL, UNKNOWN)
    def fromValue(value: _root_.scala.Int): Status = value match {
      case 0 => OK
      case 1 => WARNING
      case 2 => CRITICAL
      case 3 => UNKNOWN
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = ssf.sample.SSFSample.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = ssf.sample.SSFSample.scalaDescriptor.enums(1)
  }
  @SerialVersionUID(0L)
  final case class TagsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[TagsEntry] with scalapb.lenses.Updatable[TagsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, value) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ssf.sample.SSFSample.TagsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        ssf.sample.SSFSample.TagsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): TagsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): TagsEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = ssf.sample.SSFSample.TagsEntry
  }
  
  object TagsEntry extends scalapb.GeneratedMessageCompanion[ssf.sample.SSFSample.TagsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ssf.sample.SSFSample.TagsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ssf.sample.SSFSample.TagsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      ssf.sample.SSFSample.TagsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[ssf.sample.SSFSample.TagsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        ssf.sample.SSFSample.TagsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ssf.sample.SSFSample.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ssf.sample.SSFSample.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = ssf.sample.SSFSample.TagsEntry(
    )
    implicit class TagsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSample.TagsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ssf.sample.SSFSample.TagsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[ssf.sample.SSFSample.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[ssf.sample.SSFSample.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => ssf.sample.SSFSample.TagsEntry(__p._1, __p._2))
  }
  
  implicit class SSFSampleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSample]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ssf.sample.SSFSample](_l) {
    def metric: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSample.Metric] = field(_.metric)((c_, f_) => c_.copy(metric = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.value)((c_, f_) => c_.copy(value = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSample.Status] = field(_.status)((c_, f_) => c_.copy(status = f_))
    def sampleRate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.sampleRate)((c_, f_) => c_.copy(sampleRate = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def unit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.unit)((c_, f_) => c_.copy(unit = f_))
  }
  final val METRIC_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val VALUE_FIELD_NUMBER = 3
  final val TIMESTAMP_FIELD_NUMBER = 4
  final val MESSAGE_FIELD_NUMBER = 5
  final val STATUS_FIELD_NUMBER = 6
  final val SAMPLE_RATE_FIELD_NUMBER = 7
  final val TAGS_FIELD_NUMBER = 8
  final val UNIT_FIELD_NUMBER = 9
  @transient
  private val _typemapper_tags: _root_.scalapb.TypeMapper[ssf.sample.SSFSample.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[ssf.sample.SSFSample.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
}
