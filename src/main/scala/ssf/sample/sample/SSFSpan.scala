// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package ssf.sample

/** SSFSpan is the primary unit of reporting in SSF. It embeds a set of
  * SSFSamples, as well as start/stop time stamps and a parent ID
  * (which allows assembling a span lineage for distributed tracing
  * purposes).
  *
  * Note that since this is protobuf, an SSFSpan does not *have* to
  * include metrics, just as it does not *have* to include information
  * necessary to reconstruct a trace.
  *
  * Compatibility
  *
  * On ingestion, an SSFSpan with an empty string for a name field but
  * a tag "name" will have that name field replaced with the name tag,
  * and the tag is removed.
  *
  * Metric SSFSamples with a zero sample_rate (indicating it was left
  * out) have the sample_rate field set to 1 on ingestion.
  *
  * Validity Criteria
  *
  * Programs consuming SSFSpans should take care to only process spans
  * and metrics that fulfill the following criteria:
  *
  * Metrics are considered valid if they have a name and a value.
  *
  * SSFSpans are considered valid trace spans if they have non-zero id,
  * trace_id, start_timestamp and end_timestamp fields.
  *
  * @param traceId
  *   the trace_id is the (span) id of the root span
  * @param id
  *   the id for this span
  * @param parentId
  *   the (span) id of the direct parent, if this span is not a root
  *   span
  * @param error
  *   This flag being true signals that this span was an error. That definition
  *   of error is not implicitly fatal, as a span may error but be fixed by
  *   a subsequent retry, etc.
  * @param service
  *   The name of the service
  *   e.g. "veneur"
  * @param tags
  *   Tags are name value pairs that describe a facet of the span. They apply to
  *   the *entire* span as opposed to logs which apply to a specific time in
  *   the span.
  * @param indicator
  *   An indicator span is one that represents an action that is included in a
  *   service's Service Level Indicators (https://en.wikipedia.org/wiki/Service_level_indicator)
  *   This is a signal to receivers that this span may be used to compute SLIs.
  *   In practice a service's core feature — the thing you would "bill" for, such
  *   as an API call or read/write operation — would be flagged as an indicator
  *   span, and its child spans would further describe its duration.
  *   It's also worth nothing that an indicator need not be the "root" or first
  *   span in a trace. You might have various forms of middleware that happen
  *   first or you might have multiple services participating in the same trace.
  * @param name
  *   What to call this span. This could take the form of the endpoint
  *   (/customer/:id), the function (class::name.method), a friendly name
  *   (foo middleware) or whatever makes sense in your context.
  */
@SerialVersionUID(0L)
final case class SSFSpan(
    version: _root_.scala.Int = 0,
    traceId: _root_.scala.Long = 0L,
    id: _root_.scala.Long = 0L,
    parentId: _root_.scala.Long = 0L,
    startTimestamp: _root_.scala.Long = 0L,
    endTimestamp: _root_.scala.Long = 0L,
    error: _root_.scala.Boolean = false,
    service: _root_.scala.Predef.String = "",
    metrics: _root_.scala.collection.Seq[ssf.sample.SSFSample] = _root_.scala.collection.Seq.empty,
    tags: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String] = scala.collection.immutable.Map.empty,
    indicator: _root_.scala.Boolean = false,
    name: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[SSFSpan] with scalapb.lenses.Updatable[SSFSpan] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (version != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, version) }
      if (traceId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, traceId) }
      if (id != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, id) }
      if (parentId != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, parentId) }
      if (startTimestamp != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, startTimestamp) }
      if (endTimestamp != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, endTimestamp) }
      if (error != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, error) }
      if (service != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, service) }
      metrics.foreach(metrics => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(metrics.serializedSize) + metrics.serializedSize)
      tags.foreach(tags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ssf.sample.SSFSpan._typemapper_tags.toBase(tags).serializedSize) + ssf.sample.SSFSpan._typemapper_tags.toBase(tags).serializedSize)
      if (indicator != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, indicator) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, name) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = version
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = traceId
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = id
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = parentId
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = startTimestamp
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = endTimestamp
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
      {
        val __v = error
        if (__v != false) {
          _output__.writeBool(7, __v)
        }
      };
      {
        val __v = service
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      metrics.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      tags.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(ssf.sample.SSFSpan._typemapper_tags.toBase(__v).serializedSize)
        ssf.sample.SSFSpan._typemapper_tags.toBase(__v).writeTo(_output__)
      };
      {
        val __v = indicator
        if (__v != false) {
          _output__.writeBool(12, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(13, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ssf.sample.SSFSpan = {
      var __version = this.version
      var __traceId = this.traceId
      var __id = this.id
      var __parentId = this.parentId
      var __startTimestamp = this.startTimestamp
      var __endTimestamp = this.endTimestamp
      var __error = this.error
      var __service = this.service
      val __metrics = (_root_.scala.collection.immutable.Vector.newBuilder[ssf.sample.SSFSample] ++= this.metrics)
      val __tags = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Predef.String] ++= this.tags)
      var __indicator = this.indicator
      var __name = this.name
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __version = _input__.readInt32()
          case 16 =>
            __traceId = _input__.readInt64()
          case 24 =>
            __id = _input__.readInt64()
          case 32 =>
            __parentId = _input__.readInt64()
          case 40 =>
            __startTimestamp = _input__.readInt64()
          case 48 =>
            __endTimestamp = _input__.readInt64()
          case 56 =>
            __error = _input__.readBool()
          case 66 =>
            __service = _input__.readString()
          case 82 =>
            __metrics += _root_.scalapb.LiteParser.readMessage(_input__, ssf.sample.SSFSample.defaultInstance)
          case 90 =>
            __tags += ssf.sample.SSFSpan._typemapper_tags.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, ssf.sample.SSFSpan.TagsEntry.defaultInstance))
          case 96 =>
            __indicator = _input__.readBool()
          case 106 =>
            __name = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      ssf.sample.SSFSpan(
          version = __version,
          traceId = __traceId,
          id = __id,
          parentId = __parentId,
          startTimestamp = __startTimestamp,
          endTimestamp = __endTimestamp,
          error = __error,
          service = __service,
          metrics = __metrics.result(),
          tags = __tags.result(),
          indicator = __indicator,
          name = __name
      )
    }
    def withVersion(__v: _root_.scala.Int): SSFSpan = copy(version = __v)
    def withTraceId(__v: _root_.scala.Long): SSFSpan = copy(traceId = __v)
    def withId(__v: _root_.scala.Long): SSFSpan = copy(id = __v)
    def withParentId(__v: _root_.scala.Long): SSFSpan = copy(parentId = __v)
    def withStartTimestamp(__v: _root_.scala.Long): SSFSpan = copy(startTimestamp = __v)
    def withEndTimestamp(__v: _root_.scala.Long): SSFSpan = copy(endTimestamp = __v)
    def withError(__v: _root_.scala.Boolean): SSFSpan = copy(error = __v)
    def withService(__v: _root_.scala.Predef.String): SSFSpan = copy(service = __v)
    def clearMetrics = copy(metrics = _root_.scala.collection.Seq.empty)
    def addMetrics(__vs: ssf.sample.SSFSample*): SSFSpan = addAllMetrics(__vs)
    def addAllMetrics(__vs: TraversableOnce[ssf.sample.SSFSample]): SSFSpan = copy(metrics = metrics ++ __vs)
    def withMetrics(__v: _root_.scala.collection.Seq[ssf.sample.SSFSample]): SSFSpan = copy(metrics = __v)
    def clearTags = copy(tags = scala.collection.immutable.Map.empty)
    def addTags(__vs: (_root_.scala.Predef.String, _root_.scala.Predef.String)*): SSFSpan = addAllTags(__vs)
    def addAllTags(__vs: TraversableOnce[(_root_.scala.Predef.String, _root_.scala.Predef.String)]): SSFSpan = copy(tags = tags ++ __vs)
    def withTags(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]): SSFSpan = copy(tags = __v)
    def withIndicator(__v: _root_.scala.Boolean): SSFSpan = copy(indicator = __v)
    def withName(__v: _root_.scala.Predef.String): SSFSpan = copy(name = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = traceId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = id
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = parentId
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = startTimestamp
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = endTimestamp
          if (__t != 0L) __t else null
        }
        case 7 => {
          val __t = error
          if (__t != false) __t else null
        }
        case 8 => {
          val __t = service
          if (__t != "") __t else null
        }
        case 10 => metrics
        case 11 => tags.map(ssf.sample.SSFSpan._typemapper_tags.toBase)(_root_.scala.collection.breakOut)
        case 12 => {
          val __t = indicator
          if (__t != false) __t else null
        }
        case 13 => {
          val __t = name
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(version)
        case 2 => _root_.scalapb.descriptors.PLong(traceId)
        case 3 => _root_.scalapb.descriptors.PLong(id)
        case 4 => _root_.scalapb.descriptors.PLong(parentId)
        case 5 => _root_.scalapb.descriptors.PLong(startTimestamp)
        case 6 => _root_.scalapb.descriptors.PLong(endTimestamp)
        case 7 => _root_.scalapb.descriptors.PBoolean(error)
        case 8 => _root_.scalapb.descriptors.PString(service)
        case 10 => _root_.scalapb.descriptors.PRepeated(metrics.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 11 => _root_.scalapb.descriptors.PRepeated(tags.map(ssf.sample.SSFSpan._typemapper_tags.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 12 => _root_.scalapb.descriptors.PBoolean(indicator)
        case 13 => _root_.scalapb.descriptors.PString(name)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = ssf.sample.SSFSpan
}

object SSFSpan extends scalapb.GeneratedMessageCompanion[ssf.sample.SSFSpan] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ssf.sample.SSFSpan] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ssf.sample.SSFSpan = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    ssf.sample.SSFSpan(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(6), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[ssf.sample.SSFSample]],
      __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[_root_.scala.collection.Seq[ssf.sample.SSFSpan.TagsEntry]].map(ssf.sample.SSFSpan._typemapper_tags.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(10), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(11), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[ssf.sample.SSFSpan] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      ssf.sample.SSFSpan(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[ssf.sample.SSFSample]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[ssf.sample.SSFSpan.TagsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(ssf.sample.SSFSpan._typemapper_tags.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SampleProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SampleProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 10 => __out = ssf.sample.SSFSample
      case 11 => __out = ssf.sample.SSFSpan.TagsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.ssf.sample.SSFSpan.TagsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = ssf.sample.SSFSpan(
  )
  @SerialVersionUID(0L)
  final case class TagsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[TagsEntry] with scalapb.lenses.Updatable[TagsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, value) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): ssf.sample.SSFSpan.TagsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        ssf.sample.SSFSpan.TagsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): TagsEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Predef.String): TagsEntry = copy(value = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = ssf.sample.SSFSpan.TagsEntry
  }
  
  object TagsEntry extends scalapb.GeneratedMessageCompanion[ssf.sample.SSFSpan.TagsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[ssf.sample.SSFSpan.TagsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): ssf.sample.SSFSpan.TagsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      ssf.sample.SSFSpan.TagsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[ssf.sample.SSFSpan.TagsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        ssf.sample.SSFSpan.TagsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ssf.sample.SSFSpan.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ssf.sample.SSFSpan.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = ssf.sample.SSFSpan.TagsEntry(
    )
    implicit class TagsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSpan.TagsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ssf.sample.SSFSpan.TagsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[ssf.sample.SSFSpan.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] =
      _root_.scalapb.TypeMapper[ssf.sample.SSFSpan.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)](__m => (__m.key, __m.value))(__p => ssf.sample.SSFSpan.TagsEntry(__p._1, __p._2))
  }
  
  implicit class SSFSpanLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, ssf.sample.SSFSpan]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, ssf.sample.SSFSpan](_l) {
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def traceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.traceId)((c_, f_) => c_.copy(traceId = f_))
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def parentId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.parentId)((c_, f_) => c_.copy(parentId = f_))
    def startTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.startTimestamp)((c_, f_) => c_.copy(startTimestamp = f_))
    def endTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.endTimestamp)((c_, f_) => c_.copy(endTimestamp = f_))
    def error: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.error)((c_, f_) => c_.copy(error = f_))
    def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.service)((c_, f_) => c_.copy(service = f_))
    def metrics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[ssf.sample.SSFSample]] = field(_.metrics)((c_, f_) => c_.copy(metrics = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def indicator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.indicator)((c_, f_) => c_.copy(indicator = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val TRACE_ID_FIELD_NUMBER = 2
  final val ID_FIELD_NUMBER = 3
  final val PARENT_ID_FIELD_NUMBER = 4
  final val START_TIMESTAMP_FIELD_NUMBER = 5
  final val END_TIMESTAMP_FIELD_NUMBER = 6
  final val ERROR_FIELD_NUMBER = 7
  final val SERVICE_FIELD_NUMBER = 8
  final val METRICS_FIELD_NUMBER = 10
  final val TAGS_FIELD_NUMBER = 11
  final val INDICATOR_FIELD_NUMBER = 12
  final val NAME_FIELD_NUMBER = 13
  @transient
  private val _typemapper_tags: _root_.scalapb.TypeMapper[ssf.sample.SSFSpan.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)] = implicitly[_root_.scalapb.TypeMapper[ssf.sample.SSFSpan.TagsEntry, (_root_.scala.Predef.String, _root_.scala.Predef.String)]]
}
